openapi: 3.0.3
info:
  title: Django DRF Serve_Connect
  version: 0.0.0
paths:
  /api/schema/:
    get:
      operationId: api_schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - ckb
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - ug
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /listings/all_service/:
    get:
      operationId: listings_all_service_retrieve
      tags:
      - listings
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
          description: ''
  /listings/all_service/{id}/:
    get:
      operationId: listings_all_service_retrieve_2
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - listings
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
          description: ''
  /listings/all_service/{id}/create_reason/:
    post:
      operationId: listings_all_service_create_reason_create
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - listings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Interaction'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Interaction'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Interaction'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Interaction'
          description: ''
  /listings/all_service/delete/{id}/:
    delete:
      operationId: listings_all_service_delete_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - listings
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /listings/all_service/edit/{id}/:
    put:
      operationId: listings_all_service_edit_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - listings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Service'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Service'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
          description: ''
  /listings/create_service/:
    post:
      operationId: listings_create_service_create
      tags:
      - listings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Service'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Service'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
          description: ''
  /listings/interaction/:
    get:
      operationId: listings_interaction_retrieve
      tags:
      - listings
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Interaction_'
          description: ''
  /listings/services/{id}/interaction/:
    get:
      operationId: listings_services_interaction_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - listings
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Interaction_'
          description: ''
  /listings/user_service/:
    get:
      operationId: listings_user_service_retrieve
      tags:
      - listings
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
          description: ''
  /user/login-page/:
    post:
      operationId: user_login_page_create
      description: |-
        This view handles user login by allowing authentication through either a username or email,
        along with a password.
        It first checks if both fields are provided.
        Then, it looks up the user based on the identifier type (email or username).
        If the user exists and the password is correct,
        it authenticates the user and returns JWT tokens (access and refresh),
        user information, verification status, and profile update status.
      tags:
      - user
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /user/register/:
    post:
      operationId: user_register_create
      description: |-
        This view saves a new user,
        generates an OTP(One Time Password) and saves the OTP in the OneTime model table.
          After the OTP has been generated, an email is sent to the new user
      tags:
      - user
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registration'
          description: ''
  /user/update-profile/:
    patch:
      operationId: user_update_profile_partial_update
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProfile'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
  /user/update_password/:
    patch:
      operationId: user_update_password_partial_update
      tags:
      - user
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /user/user-ver/:
    post:
      operationId: user_user_ver_create
      description: |-
        This view verifies a user's OTP (one-time password).
        If the OTP is valid and the user is not yet verified,
        marks them as verified.
      tags:
      - user
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
          description: ''
components:
  schemas:
    Interaction:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          readOnly: true
          nullable: true
        service:
          type: integer
          readOnly: true
        reason:
          type: string
          nullable: true
          maxLength: 200
        created:
          type: string
          format: date-time
          readOnly: true
      required:
      - created
      - id
      - service
      - user
    Interaction_:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          readOnly: true
          nullable: true
        service:
          type: integer
          readOnly: true
        username:
          type: string
          readOnly: true
        reason:
          type: string
          nullable: true
          maxLength: 200
        created:
          type: string
          format: date-time
          readOnly: true
        title:
          type: string
          readOnly: true
      required:
      - created
      - id
      - service
      - title
      - user
      - username
    PatchedProfile:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        account_type:
          type: string
          maxLength: 100
        based_on:
          nullable: true
        org_name:
          type: string
          nullable: true
          maxLength: 100
        org_type:
          type: string
          nullable: true
          maxLength: 100
        bio:
          type: string
          nullable: true
          maxLength: 200
    Profile:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        account_type:
          type: string
          maxLength: 100
        based_on:
          nullable: true
        org_name:
          type: string
          nullable: true
          maxLength: 100
        org_type:
          type: string
          nullable: true
          maxLength: 100
        bio:
          type: string
          nullable: true
          maxLength: 200
      required:
      - id
    Registration:
      type: object
      properties:
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        password:
          type: string
          writeOnly: true
          maxLength: 128
        password2:
          type: string
          writeOnly: true
      required:
      - password
      - password2
      - username
    Service:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          nullable: true
          maxLength: 50
        brief_des:
          type: string
          nullable: true
          maxLength: 200
        duration:
          type: string
          nullable: true
          maxLength: 100
        description:
          type: string
          nullable: true
          maxLength: 200
        expectation:
          nullable: true
        category:
          type: string
          nullable: true
          maxLength: 50
        user:
          type: integer
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        updated:
          type: string
          format: date-time
          readOnly: true
        first_name:
          type: string
          readOnly: true
        last_name:
          type: string
          readOnly: true
        org_type:
          type: string
          readOnly: true
        org_name:
          type: string
          readOnly: true
      required:
      - created
      - first_name
      - id
      - last_name
      - org_name
      - org_type
      - updated
      - user
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
